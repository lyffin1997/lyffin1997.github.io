<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>面试 on 小黎的技术指北</title>
    <link>https://lyffin1997.github.io/tags/%E9%9D%A2%E8%AF%95/</link>
    <description>Recent content in 面试 on 小黎的技术指北</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Wed, 13 Jul 2022 00:02:48 +0800</lastBuildDate><atom:link href="https://lyffin1997.github.io/tags/%E9%9D%A2%E8%AF%95/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Springboot学习简介</title>
      <link>https://lyffin1997.github.io/spring/springboot%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 13 Jul 2022 00:02:48 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 学习路线   javaSE
  mysql:持久化
  html+css+js+jquery+框架（jsp、vue等）
  javaweb（springmvc）
  M（model）指模型
  一般指Service和DAO
 V(view)指视图层  一般指页面，如jsp、html等
 C(controller)指控制层  如springmvc中的controller
整体逻辑：V（页面数据）-&amp;gt; C（控制器）-&amp;gt; M（逻辑处理及数据持久化）
 ssm（除此之外需掌握服务器部署war包的操作。详情参考tomcat部署war包流程） springboot（部署jar包，同上需掌握部署jar包流程及原理（内嵌tomcat），springboot已经开始使用微服务架构）  内嵌tomcat简易流程：通过SpringBootApplication注解run方法创建tomcatWebServer，详情参考spring源码
​  springcloud（微服务越来越多，spring再优化诞生springcloud）  2. springboot是什么 2.1 spring目的、理念 Spring是为了解决企业级应用开发的复杂性而创建的，简化开发
2.2 spring如何简化开发  基于POJO的轻量级和最小侵入性编程（bean） 通过IOC，依赖注入（DI）和面向接口实现松耦合（核心：容器） 基于切面（AOP）和惯例进行声明式编程（核心：AOP） 通过切面和模板减少样式代码  2.3 springboot是什么   springboot就是一个javaweb的开发框架，和springmvc类似。
  正式定义：简化开发，约定大约配置（核心思想，在maven、spring、springmvc、springboot、docker、k8s……中都遵循该思想） ，能迅速的开发web应用，几行代码开发一个http接口。
  所有的技术框架都遵循一条主线规律：从一个复杂的应用场景，衍生一种规范框架
  java企业级应用发展：J2EE -&amp;gt; spring -&amp;gt; springboot</description>
    </item>
    
    <item>
      <title>自动装配 狂神笔记</title>
      <link>https://lyffin1997.github.io/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 12 Jul 2022 23:42:32 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0/</guid>
      <description>​ 1. pom.xml   spring-boot-dependencies：核心依赖在父工程中
  在写或者引入springboot依赖的时候不需要指定版本，就是因为父工程中有这些版本仓库
  2. 启动器 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  启动器：springboot的启动场景（如代码中的web、test两种） spring-boot-starter-web：自动导入web环境所有的依赖 springboot会将所有功能场景变成一个个启动器，使用什么场景引入对应的启动器即可 https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters   spring官网列出的所有启动器依赖包
3. 主程序  @SpringBootApplication：标注该类为springboot的一个应用类，启动类下的所有资源被导入，是自动装配到核心（需要parent工程才能用这个注解） SpringApplication.run()：将springboot应用启动 注解  @ComponentScan：扫描主启动类同级的包 @SpringBootConfiguration：与@Configuration功能一致，只是它是springboot注解，而另一个是spring注解 @Configuration：spring配置类，标注当前类是配置类，一个Configurarion就是一个Spring的xml版容器（beans），即会将当前类内所有以@Bean注解标注的方法的实例纳入到spring容器中，实例名就是方法名。 @Component：自动检测和使用类路径扫描自动配置bean，每个类即一个bean（即类的实例），并添加到容器中 @Bean：显示声明单个bean,与@Component由spring自动执行不同。标注方法时告诉spring返回对象，并将对象注册为bean。 @EnableAutoConfiguration：自动配置 @AutoConfigurationPackage：自动配置包 @Import({Registrar.class})：自动配置包注册（@ComponentScan扫描到的包到这来注册，所以只能在启动类同级目录下创建包就是因为它） @Import({AutoConfigurationImportSelector.class})：自动配置导入选择（选择pom.xml中dependencies配置需要导入的组件） //获取自动配置的实体 getAutoConfigurationEntry() //获取候选的配置 List&amp;lt;String&amp;gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);  this.getSpringFactoriesLoaderFactoryClass()
  获取候选的配置:标注了@EnableAutoConfiguration的类（即启动类）
  SpringFactoriesLoader.loadFactoryNames()
  获取所有的需要加载的配置
  private static Map&amp;lt;String, List&amp;gt; loadSpringFactories(ClassLoader classLoader)
  获取系统资源及项目资源（都是从这获取META-INF/spring.</description>
    </item>
    
    <item>
      <title>Java抽象类</title>
      <link>https://lyffin1997.github.io/java/java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Tue, 12 Jul 2022 11:52:23 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>  抽象类中可以有抽象方法和非抽象方法
  抽象类可以没有抽象方法，但有抽象方法的一定是抽象类
   一个类只能继承一个类 一个类可以实现多个接口 一个接口可以继承多个接口    抽象类中的子类必须重写抽象类中所有的抽象方法
   或者子类也是抽象类、抽象方法    抽象类不能被实例化
  </description>
    </item>
    
    <item>
      <title>ArrayList、ArrayDeque、LinkedList区别</title>
      <link>https://lyffin1997.github.io/java/arraylistarraydequelinkedlist%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 11:44:56 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/arraylistarraydequelinkedlist%E5%8C%BA%E5%88%AB/</guid>
      <description> 随机访问元素性能   ArrayList、ArrayDeque &amp;gt; LinkedList
  （索引数据结构，直接返回索引位置元素，但是linkedList需要移动指针去找）
   存储形式
   ArrayList、ArraryDeque：数组 LinkedList：链表（双链）     (因此linkedList内存消耗更多，因为它每个节点需要存储实际数据和前后节点的位置)
  插入、删除元素性能   ArrayList、ArrayDeque &amp;lt; LinkedList
  （因为插入数据后需要移动插入位置后所有元素并且修改它们的索引，数组满了时还要建立新数组）
   删除尾部元素
    ArrayList删除尾部元素时，若size - index - 1 &amp;gt; 0，需要copy数组，较耗时
   size:list大小 index:remove时输入的索引      ​    ArrayDeque调用pollLast()方法，该方法保留了tail属性，较快    ​ </description>
    </item>
    
    <item>
      <title>Java对象的类加载过程</title>
      <link>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 12 Jul 2022 11:31:44 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>  定义：jvm虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程
  过程：加载、链接、初始化
  链接：验证、准备、解析
  完整过程：加载=&amp;gt;验证=&amp;gt;准备=&amp;gt;解析=&amp;gt;初始化
  加载：把class字节码文件从各个来源通过类加载器装载入内存中。
  字节码来源：本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络、以及动态代理实时编译。
  类加载器：一般包括启动类加载器、扩展类加载器、应用类加载器以及用户自定义加载器。
  验证：保证加载进来的字节流符合虚拟机规范，不会造成安全错误。
  对元数据对验证
  对字节码的验证
  对文件格式的验证
  对符号引用对验证
  准备：为类变量（静态变量）分配内存，并赋予初值。
  解析：将常量池中的符号引用替换为直接引用的过程。
  符号引用：字符串，具有唯一识别性，用于识别方法、变量、类信息
  直接引用：内存地址或偏移量
   （例如方法hello()，方法的地址为1234567，hello就是符号引用，1234567是直接引用）
  初始化：主要对类变量进行初始化，并执行类构造器对过程。  </description>
    </item>
    
    <item>
      <title>Java对象的创建过程</title>
      <link>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 12 Jul 2022 11:30:43 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</guid>
      <description> 检查类是否已经被加载  （根据new的参数在常量池中定位一个类的符号引用，如果没有找到这个符号引用，说明类没有被加载，则进行类的加载、解析、初始化）
 为对象分配内存空间（堆中） 为分配的内存空间初始化零值（为对象字段设置零值） 对对象进行其他设置（设置对象头） 调用对象的init方法   （执行对象内部生产的init方法，初始化成员变量值，同时执行搜集到的{}代码块逻辑，这里只初始化用static修饰的部分，最后执行对象的构造方法）
 </description>
    </item>
    
    <item>
      <title>重载和重写的区别</title>
      <link>https://lyffin1997.github.io/java/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 10:44:54 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>1. 重载  函数名相同 参数个数不同或者参数类型不同 函数重载和返回值类型无关 可以有不同的访问修饰符； 可以抛出不同的异常；  2. 重写  参数列表必须完全与被重写的方法相同，否则不能称其为重写而是重载。 返回的类型必须一直与被重写的方法的返回类型相同，否则不能称其为重写而是重载。 访问修饰符的限制一定要大于被重写方法的访问修饰符（public&amp;gt;protected&amp;gt;default&amp;gt;private） 重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常。例如：父类的一个方法申明了一个检查异常IOException，在重写这个方法是就不能抛出Exception,只能抛出IOException的子类异常，可以抛出非检查异常。  </description>
    </item>
    
    <item>
      <title>String、StringBuilder、StringBuffer</title>
      <link>https://lyffin1997.github.io/java/stringstringbuilderstringbuffer/</link>
      <pubDate>Tue, 12 Jul 2022 00:50:39 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/stringstringbuilderstringbuffer/</guid>
      <description>1. 字符串相加方式的区别  String   String str = &amp;ldquo;a&amp;rdquo; + &amp;ldquo;b&amp;rdquo;; //最快
  String str = &amp;quot;&amp;quot; + &amp;ldquo;word&amp;rdquo;;
  StringBuilder   StringBuilder s = new StringBuilder(&amp;ldquo;word&amp;rdquo;).append(&amp;ldquo;a&amp;rdquo;).apend(&amp;ldquo;b&amp;rdquo;);
  StringBuffer   同StringBuilder。
 2. 字符串相加结果的区别  String   String是final修饰的不可变类,即一旦创建对象，字符序列不可变
  如: String s = &amp;quot;a&amp;quot;;
  s = &amp;quot;b&amp;quot;;
  System.out.println(s);
  打印结果是b，但此时“b”在内存中的位置已不是原来“a”的位置，而是新创建了一个实例对象指向“b”，并且s指向新对象，原对象仍然存在，如果没有再被引用将被回收。
  StringBuilder   通过append()、insert()等方法可改变字符串序列，内存地址不变。一般得到最终字符串后转换成String。
  StringBuffer   同上。</description>
    </item>
    
  </channel>
</rss>
