<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AOP on 小黎的技术指北</title>
    <link>https://lyffin1997.github.io/tags/aop/</link>
    <description>Recent content in AOP on 小黎的技术指北</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 12 Jul 2022 11:48:09 +0800</lastBuildDate><atom:link href="https://lyffin1997.github.io/tags/aop/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么是AOP</title>
      <link>https://lyffin1997.github.io/spring/%E4%BB%80%E4%B9%88%E6%98%AFaop/</link>
      <pubDate>Tue, 12 Jul 2022 11:48:09 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/%E4%BB%80%E4%B9%88%E6%98%AFaop/</guid>
      <description>定义：Aspect Oriented Programming 面向切面编程
   也叫动态代理 通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术 是一种概念，没有具体语言实现 将逻辑重复代码独立于业务代码之外 参考： https://my.oschina.net/guangshan/blog/1797461    目的：例如java中要想实现代码的重用，一般可以用继承或者组合的方式。但是当你修改最底层的方法时，其他的子类以及调用的方法都要修改，增加了代码开发量和出错率。（父子关系的纵向重用）
   由此AOP思想随之诞生（横向切面）    解释：例如这样一个需求：有三个访问类和一个数据类，三个访问类并发访问数据类，且一个类在访问数据时其他类不能访问，当前类访问结束其它类才能访问
    传统方法：
    创建一个抽象类   访问类继承该抽象类
  限制：
   java只能单继承，访问类无法再继承其他类 访问类因包含“锁”状态，只能被重用在有“锁”的场景，重用受限      AOP思想：
   访问类主要功能是访问数据，而不是锁 因此将“锁”抽取出来作为一个切面       实例：
    例如想要实现某个网址增加授权认证：</description>
    </item>
    
  </channel>
</rss>
