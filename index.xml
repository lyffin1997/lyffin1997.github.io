<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小黎的技术指北</title>
    <link>https://lyffin1997.github.io/</link>
    <description>Recent content on 小黎的技术指北</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 14 Jul 2022 23:10:53 +0800</lastBuildDate><atom:link href="https://lyffin1997.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Springboot如何接管springmvc</title>
      <link>https://lyffin1997.github.io/spring/springboot%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1springmvc/</link>
      <pubDate>Thu, 14 Jul 2022 23:10:53 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1springmvc/</guid>
      <description>1. 依赖 pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--这里代码示例使用Thymeleaf模板引擎--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 代码示例 主要是通过实现WebMvcConfigurer.java接口来进行个性化定制，下面进行个别方法的重写展示：
  创建配置文件
在启动类同级目录下创建config文件夹，在里面创建配置文件：./config/MyMvcConfig.java
  2.1 重写视图解析器 可以在MyViewResolver中自定义一些功能
@Configuration public class MyMvcConfig implements WebMvcConfigurer { @Bean public MyViewResolver myViewResolver() { return new MyViewResolver(); } //自定义视图解析器  public static class MyViewResolver implements ViewResolver { @Override public View resolveViewName(String viewName, Locale locale) throws Exception { return null; } } } 2.2 重写视图控制器   实现视图跳转</description>
    </item>
    
    <item>
      <title>Snmp_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/snmp_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 14 Jul 2022 00:23:38 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/snmp_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 开机交换机snmp协议（非华为交换机跳过这一步） ​ //192.168.1.9是snmp_exporter地址
2. 配置go 环境 安装go1.15.6（tar包或者命令行安装都行）
 vim /etc/profile
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=/root/go
source /etc/profile
go version #显示版本号即安装成功
  //go环境变量国内代理：
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
 3. 下载snmp环境 yum install gcc gcc-g++ make net-snmp net-snmp-utils net-snmp-libs net-snmp-devel (此外，git也需安装配置好)
 //测试snmp
snmpwalk -v 2c -c public 192.168.1.222 .1 //pubilc是团体名，.1表示查看所有信息，192.168.1.222是设备ip
 4. 下载generator代码 go get github.com/prometheus/snmp_exporter/generator 5. 编译  //路径不一定准确，总之找到GOPATH路径下的generator文件夹
cd ${GOPATH-$HOME/go}/src/github.com/prometheus/snmp_exporter/gener ator go build  6.</description>
    </item>
    
    <item>
      <title>Tomcat_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/tomcat_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 14 Jul 2022 00:04:50 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/tomcat_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 下载相关文件 https://github.com/nlighten/tomcat_exporter
2. 下载下图中6个jar包 放到要监控的Tomcat的lib目录下，例如：/usr/local/apache-tomcat-7.0.61/lib
3. 下载war包 重命名metrics.war，放到Tomcat的webapps目录下，例如：/usr/local/apache-tomcat-7.0.61/webapps
4. 重启Tomcat，访问ip:8080/metrics即可 注意：端口号和启动的tomcat端口号一致
5. 在prometheus.yml中，添加job 6. 重启prometheus 7. promQL  tomcat延迟（5分钟内平均值）  sum by(instance)(increase(tomcat_requestprocessor_time_seconds{instance=&amp;quot;$instance&amp;quot;}[5m])) / sum by(instance)(increase(tomcat_requestprocessor_request_count_total{instance=&amp;quot;$instance&amp;quot;}[5m])) * 1000  tomcat实例发送流量（累加）  sum by(instance)(tomcat_requestprocessor_sent_bytes{instance=&amp;quot;$instance&amp;quot;})  tomcat实例接收流量（累加）  sum by(instance)(tomcat_requestprocessor_received_bytes{instance=&amp;quot;$instance&amp;quot;})  tomcat实例请求总数（累加）  sum by(instance)(tomcat_requestprocessor_request_count_total{instance=&amp;quot;$instance&amp;quot;})  tomcat实例错误请求总数（累加）  sum by(instance)(tomcat_requestprocessor_error_count_total{instance=&amp;quot;$instance&amp;quot;})  tomcat堆内存使用情况  jvm_memory_bytes_used{area=&amp;quot;heap&amp;quot;,instance=&amp;quot;$instance&amp;quot;} / jvm_memory_bytes_committed{area=&amp;quot;heap&amp;quot;,instance=&amp;quot;$instance&amp;quot;} * 100  tomcat GC次数（累加）  sum by(instance)(jvm_gc_collection_seconds_count{instance=&amp;quot;$instance&amp;quot;}) //5分钟内增长次数
increase(jvm_gc_collection_seconds_count{instance=&amp;quot;$instance&amp;quot;}[5m]) //5分支内增长耗时
increase(jvm_gc_collection_seconds_sum{instance=&amp;quot;$instance&amp;quot;}[5m])  tomcat线程数  sum by(instance)(tomcat_threads_total{instance=&amp;quot;$instance&amp;quot;}) </description>
    </item>
    
    <item>
      <title>Windows_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/windows_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:58:09 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/windows_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 安装及部署  下载windows exporter程序 https://github.com/prometheus-community/windows_exporter/releases 直接双击运行即可 默认端口9182 prometheus添加配置   2. PromQL  CPU利用率  100 - (avg by (instance) (irate(windows_cpu_time_total{instance=&amp;quot;$node&amp;quot;,mode=&amp;quot;idle&amp;quot;}[2m])) * 100)  内存容量  windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;}  内存使用量  windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;} - windows_os_physical_memory_free_bytes{instance=&amp;quot;$node&amp;quot;}  内存利用率  (1 - (windows_os_physical_memory_free_bytes{instance=&amp;quot;$node&amp;quot;} / windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;})) * 100  磁盘容量  sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;})  磁盘使用量  sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;} - windows_logical_disk_free_bytes{instance=&amp;quot;$node&amp;quot;})  磁盘利用率  (1 - sum by(instance)(windows_logical_disk_free_bytes{instance=&amp;quot;$node&amp;quot;}) / sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;})) * 100  磁盘每秒读取(KB)  sum by(instance)(irate(windows_logical_disk_read_bytes_total{instance=&amp;quot;$node&amp;quot;}[5m])) / 1024  磁盘每秒写入(KB)  sum by(instance)(irate(windows_logical_disk_write_bytes_total{instance=&amp;quot;$node&amp;quot;}[5m])) / 1024  网络上传速率(Kbps)  sum by(instance)(irate(windows_net_bytes_sent_total{instance=&amp;quot;$node&amp;quot;,nic!</description>
    </item>
    
    <item>
      <title>Mysqld_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/mysqld_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:45:04 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/mysqld_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 登录mysql并增加exporter授权  mysql -uroot -p use mysql; set global validate_password_policy=0; create user &amp;lsquo;exporter&amp;rsquo;@&#39;%&#39; identified by &amp;lsquo;12345678&amp;rsquo;; GRANT PROCESS, REPLICATION CLIENT, SELECT ON . TO &amp;lsquo;exporter&amp;rsquo;@&#39;%&#39; WITH MAX_USER_CONNECTIONS 3; flush privileges;  2. 安装mysqld_exporter ​ 也可直接从链接下载tar包复制到目录中替换步骤2，下载链接：https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz
3. 创建mysql配置文件  cd /usr/local/prometheus/mysqld_exporter touch .my.cnf vi .my.cnf 按英文输入法小写“i”键 将以下内容复制粘贴  [client] host=127.0.0.1 port=3306 user=exporter password=12345678  按“Esc”键，然后再输入英文的“:wq”，按enter退出  4. 创建mysqld_exporter配置文件  cd /usr/lib/systemd/system/ touch mysql_exporter.service 输入文件内容如下  [Unit] Description=mysqld_exporter After=network.target [Service] Type=simple User=mysql # exporter对应授权账号,exporter123对应授权密码,localhost对应授权账号密码所在的地址 Environment=DATA_SOURCE_NAME=exporter:12345678@(localhost:3306)/ ExecStart=/usr/local/prometheus/mysqld_exporter/mysqld_exporter --web.</description>
    </item>
    
    <item>
      <title>Prometheus简介</title>
      <link>https://lyffin1997.github.io/application/prometheus%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 13 Jul 2022 23:34:27 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/prometheus%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 定位  promethues本身并没有监控的功能，它的作用是采用times-series（时间序列）的方式，以一种自定义的格式存储数据在本地硬盘上
 2. 数据格式 2.1 time-series  Prometheus会将所有采集到的样本数据以时间序列（time-series）的方式保存在内存数据库中,并且定时保存到硬盘上。
  time-series按照时间戳和值的顺序存放，每个time-series称为一个样本（sample），它由三部分组成：
   指标(metric)：metric name和描述当前样本特征的labelsets;     时间戳(timestamp)：一个精确到毫秒的时间戳;     样本值(value)： 一个float64的浮点型数据表示当前样本的值。    图中每个点为一个time-series，横坐标为时间戳timestamp，纵坐标为样本值，每个time-series都有一个唯一的描述该样本特征的metric。
 2.2 指标（metric） 指标由metric name和用于描述样本特征的labelsets组成
2.2.1 metric name 反映样本名称，如，http_request_total - 表示当前系统接收到的HTTP请求总量。
2.2.2 Lablesets 该部分是一个{lable}集，标签(label)反映了当前样本的特征维度，通过这些维度Prometheus可以对样本数据进行过滤，聚合等（类似于mysql查询语句）。
每个lable由lable name和 lable value两部分组成:
 “method”为lable name ”POST”为lable value。  2.2.3 metric类型 大致可分为四种类型：
Counter（计数器）、Gauge（仪表盘）、Histogram（直方图）、Summary（摘要）。
2.2.3.1 Counter Counter：只增不减的计数器。
一般用于监控http请求次数、cpu使用时间等只增不长的指标
2.2.3.2 Gauge Gauge：可增可减的仪表盘
常见指标如：node_memory_MemFree（主机当前空闲的内容大小）、node_memory_MemAvailable（可用内存大小）都是Gauge类型的监控指标。</description>
    </item>
    
    <item>
      <title>Node_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/node_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:14:57 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/node_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 安装部署 1. cd /usr/local/prometheus （先进入你想安装的目录）
2. 下载node_exporter包 wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz -P /usr/local/prometheus 3. 解压 tar zxvf /usr/local/prometheus/node_exporter-0.18.1.linux-amd64.tar.gz 4. 重命名 mv /usr/local/prometheus/node_exporter-0.18.1.linux-amd64.tar.gz /usr/local/prometheus/node_exporter 5. 创建启动服务 touch /etc/systemd/system/node_exporter.service 6. 编辑启动服务文件  vim /etc/systemd/system/node_exporter.service 按i（注意切换英文输入） 将下列代码复制粘贴  [Unit] Description=node_exporter Documentation=https://prometheus.io/ After=network.target [Service] Type=simple User=root ExecStart=/usr/local/prometheus/node_exporter/node_exporter Restart=on-failure [Install] WantedBy=multi-user.target  按esc 按 :wq (注意:也要按)  7. 重新加载系统服务 systemctl daemon-reload 8. 开机自启 systemctl enable node_exporter 9. 启动 systemctl start node_exporter 10. 验证 http://10.4.4.173:9100/metrics
2. promQL 2.</description>
    </item>
    
    <item>
      <title>Hugo技巧</title>
      <link>https://lyffin1997.github.io/application/hugo%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 13 Jul 2022 00:10:35 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/hugo%E6%8A%80%E5%B7%A7/</guid>
      <description>  编译hugo页面（myblog下运行，生成public）
hugo --theme=hello-friend-ng --baseUrl=&amp;quot;https://lyffin1997.github.io/&amp;quot; --buildDrafts
  运行hugo(myblog下运行)
hugo server -t hello-friend-ng --buildDrafts
  </description>
    </item>
    
    <item>
      <title>Springboot学习简介</title>
      <link>https://lyffin1997.github.io/spring/springboot%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Wed, 13 Jul 2022 00:02:48 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E5%AD%A6%E4%B9%A0%E7%AE%80%E4%BB%8B/</guid>
      <description>1. 学习路线   javaSE
  mysql:持久化
  html+css+js+jquery+框架（jsp、vue等）
  javaweb（springmvc）
  M（model）指模型
  一般指Service和DAO
 V(view)指视图层  一般指页面，如jsp、html等
 C(controller)指控制层  如springmvc中的controller
整体逻辑：V（页面数据）-&amp;gt; C（控制器）-&amp;gt; M（逻辑处理及数据持久化）
 ssm（除此之外需掌握服务器部署war包的操作。详情参考tomcat部署war包流程） springboot（部署jar包，同上需掌握部署jar包流程及原理（内嵌tomcat），springboot已经开始使用微服务架构）  内嵌tomcat简易流程：通过SpringBootApplication注解run方法创建tomcatWebServer，详情参考spring源码
​  springcloud（微服务越来越多，spring再优化诞生springcloud）  2. springboot是什么 2.1 spring目的、理念 Spring是为了解决企业级应用开发的复杂性而创建的，简化开发
2.2 spring如何简化开发  基于POJO的轻量级和最小侵入性编程（bean） 通过IOC，依赖注入（DI）和面向接口实现松耦合（核心：容器） 基于切面（AOP）和惯例进行声明式编程（核心：AOP） 通过切面和模板减少样式代码  2.3 springboot是什么   springboot就是一个javaweb的开发框架，和springmvc类似。
  正式定义：简化开发，约定大约配置（核心思想，在maven、spring、springmvc、springboot、docker、k8s……中都遵循该思想） ，能迅速的开发web应用，几行代码开发一个http接口。
  所有的技术框架都遵循一条主线规律：从一个复杂的应用场景，衍生一种规范框架
  java企业级应用发展：J2EE -&amp;gt; spring -&amp;gt; springboot</description>
    </item>
    
    <item>
      <title>如何编写配置文件</title>
      <link>https://lyffin1997.github.io/spring/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</link>
      <pubDate>Tue, 12 Jul 2022 23:50:01 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</guid>
      <description>1. 语法   yml和yaml一样的文件格式，但是yaml优先级比yml高
  名称固定：application.properties或者application.yml
  可以同时存在properties和yml，且都会生效
  语法:
   application.properties: key=value    server.port=8080    application.yml: key:空格value    server: port: 8080   yml可以存对象，properties不行
   yml    student: name: lifeng age: 18 #行内写法 student: {name: lifeng,age: 18}  properties  student.name=lifeng student.age=18  yml可以写数组  pets: - cat - dog - pig pets: [cat,dog,pig]  yml可以用特殊表达式（可搜索spring el表达式）  name: ${random.</description>
    </item>
    
    <item>
      <title>自动装配 狂神笔记</title>
      <link>https://lyffin1997.github.io/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Tue, 12 Jul 2022 23:42:32 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8D-%E7%8B%82%E7%A5%9E%E7%AC%94%E8%AE%B0/</guid>
      <description>​ 1. pom.xml   spring-boot-dependencies：核心依赖在父工程中
  在写或者引入springboot依赖的时候不需要指定版本，就是因为父工程中有这些版本仓库
  2. 启动器 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt;  启动器：springboot的启动场景（如代码中的web、test两种） spring-boot-starter-web：自动导入web环境所有的依赖 springboot会将所有功能场景变成一个个启动器，使用什么场景引入对应的启动器即可 https://docs.spring.io/spring-boot/docs/current/reference/html/using.html#using.build-systems.starters   spring官网列出的所有启动器依赖包
3. 主程序  @SpringBootApplication：标注该类为springboot的一个应用类，启动类下的所有资源被导入，是自动装配到核心（需要parent工程才能用这个注解） SpringApplication.run()：将springboot应用启动 注解  @ComponentScan：扫描主启动类同级的包 @SpringBootConfiguration：与@Configuration功能一致，只是它是springboot注解，而另一个是spring注解 @Configuration：spring配置类，标注当前类是配置类，一个Configurarion就是一个Spring的xml版容器（beans），即会将当前类内所有以@Bean注解标注的方法的实例纳入到spring容器中，实例名就是方法名。 @Component：自动检测和使用类路径扫描自动配置bean，每个类即一个bean（即类的实例），并添加到容器中 @Bean：显示声明单个bean,与@Component由spring自动执行不同。标注方法时告诉spring返回对象，并将对象注册为bean。 @EnableAutoConfiguration：自动配置 @AutoConfigurationPackage：自动配置包 @Import({Registrar.class})：自动配置包注册（@ComponentScan扫描到的包到这来注册，所以只能在启动类同级目录下创建包就是因为它） @Import({AutoConfigurationImportSelector.class})：自动配置导入选择（选择pom.xml中dependencies配置需要导入的组件） //获取自动配置的实体 getAutoConfigurationEntry() //获取候选的配置 List&amp;lt;String&amp;gt; configurations = this.getCandidateConfigurations(annotationMetadata, attributes);  this.getSpringFactoriesLoaderFactoryClass()
  获取候选的配置:标注了@EnableAutoConfiguration的类（即启动类）
  SpringFactoriesLoader.loadFactoryNames()
  获取所有的需要加载的配置
  private static Map&amp;lt;String, List&amp;gt; loadSpringFactories(ClassLoader classLoader)
  获取系统资源及项目资源（都是从这获取META-INF/spring.</description>
    </item>
    
    <item>
      <title>SpringSecurity</title>
      <link>https://lyffin1997.github.io/spring/springsecurity/</link>
      <pubDate>Tue, 12 Jul 2022 23:14:27 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springsecurity/</guid>
      <description>1. 什么是SpringSecurity  Spring Security是针对spring项目的安全框架，也是springboot底层安全模块默认的技术选型，它可以实现强大的Web安全控制，仅需要引入spring-boot-starter-security
 主要功能：认证（Authentication）和授权（Authorization）
2. 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; //themeleaf依赖用于配合教程展示，核心依赖为上面的starter &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-spring5&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-extras-java8time&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 3. 配置文件 //取消页面缓存 spring.thymeleaf.cache=false 4. 导入模板 导入themeleaf模板
5. 用户授权  创建文件  ​  编写路由  @Controller public class RouterController { @RequestMapping({&amp;#34;/&amp;#34;,&amp;#34;/index&amp;#34;}) public String index() { return &amp;#34;index&amp;#34;; } @RequestMapping(&amp;#34;/toLogin&amp;#34;) public String toLogin() { return &amp;#34;views/login&amp;#34;; } @RequestMapping(&amp;#34;/level1/{id}&amp;#34;) public String level1(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level1/&amp;#34;+id; } @RequestMapping(&amp;#34;/level2/{id}&amp;#34;) public String level2(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level2/&amp;#34;+id; } @RequestMapping(&amp;#34;/level3/{id}&amp;#34;) public String level3(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level3/&amp;#34;+id; } }   授权</description>
    </item>
    
    <item>
      <title>Shiro</title>
      <link>https://lyffin1997.github.io/application/shiro/</link>
      <pubDate>Tue, 12 Jul 2022 23:09:07 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/shiro/</guid>
      <description>1 什么是shiro   定义：Apache Shiro是一个java的安全框架
  作用：认证，授权，加密，会话管理，web集成，缓存
  核心：
   Subject：用户 SecurityManager：管理所有用户 Realm：连接数据    2 快速开始shiro   依赖   配置文件
   log4j2.xml    &amp;lt;Configuration name=&amp;#34;ConfigTest&amp;#34; status=&amp;#34;ERROR&amp;#34; monitorInterval=&amp;#34;5&amp;#34;&amp;gt; &amp;lt;!-- ~ Licensed to the Apache Software Foundation (ASF) under one ~ or more contributor license agreements. See the NOTICE file ~ distributed with this work for additional information ~ regarding copyright ownership.</description>
    </item>
    
    <item>
      <title>Springboot整合mybatis</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88mybatis/</link>
      <pubDate>Tue, 12 Jul 2022 22:50:54 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88mybatis/</guid>
      <description> 依赖   配置  ​  mybatis.type-aliases-package：指定映射文件所在包 mybatis.mapper-locations：指定xml文件路径  ​   mapper接口（Dao层）
   @Mapper注解：用于mapper接口文件，表示该文件是mybatis的一个接口类 @MapperScan(&amp;ldquo;com.lyffin.mapper&amp;rdquo;)：用于启动类，扫描该包中所有文件 @Repository：扫描并自动配置bean    ​   xml文件
   路径：resources/mybatis/mapper（xml文件写在该路径下，注意与上面配置文件对应） namespace：指定dao文件 resultType：指定映射文件（这里直接使用别名而不是路径，因为配置文件已经配置了） parameterType：同上 ：开启缓存，用法未知，自行百度 ：sql片段，不解释    &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;mapper namespace=&amp;#34;com.lyffin.mapper.UserMapper&amp;#34;&amp;gt; &amp;lt;select id=&amp;#34;selectBlog&amp;#34; resultType=&amp;#34;User&amp;#34;&amp;gt; select * from Blog where id = #{id} &amp;lt;/select&amp;gt; &amp;lt;/mapper&amp;gt; ​ </description>
    </item>
    
    <item>
      <title>配置durid</title>
      <link>https://lyffin1997.github.io/application/%E9%85%8D%E7%BD%AEdurid/</link>
      <pubDate>Tue, 12 Jul 2022 22:42:56 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/%E9%85%8D%E7%BD%AEdurid/</guid>
      <description>1. druid简介   Druid是一个数据库连接池。
  作用
 替换DBCP和C3P0。Druid提供了一个高效、功能强大、可扩展性好的数据库连接池。
  可以监控数据库访问性能，Druid内置提供了一个功能强大的StatFilter插件，能够详细统计SQL的执行性能，这对于线上分析数据库访问性能有帮助。
  数据库密码加密。直接把数据库密码写在配置文件中，这是不好的行为，容易导致安全问题。DruidDruiver和DruidDataSource都支持PasswordCallback。
  SQL执行日志，Druid提供了不同的LogFilter，能够支持Common-Logging、Log4j和JdkLog，你可以按需要选择相应的LogFilter，监控你应用的数据库访问情况。
  扩展JDBC，如果你要对JDBC层有编程的需求，可以通过Druid提供的Filter机制，很方便编写JDBC层的扩展插件。
   2. 配置druid数据源   依赖
因为配置项里用到了log4j，所以还要引入log4j依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.9&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency &amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency &amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;log4j&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;log4j&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.12&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt;   配置文件
如果启动报错将driver-class-name换成com.mysql.cj.jdbc.Driver
spring: datasource: username: root password: 123456 url: jdbc:mysql://localhost:3306/lyffin_test?serverTimezone=UTC&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf-8 driver-class-name: com.mysql.cj.jdbc.Driver type: com.</description>
    </item>
    
    <item>
      <title>Java中应用kafka</title>
      <link>https://lyffin1997.github.io/middleware/java%E4%B8%AD%E5%BA%94%E7%94%A8kafka/</link>
      <pubDate>Tue, 12 Jul 2022 22:30:25 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/middleware/java%E4%B8%AD%E5%BA%94%E7%94%A8kafka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Springboot整合jdbc</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88jdbc/</link>
      <pubDate>Tue, 12 Jul 2022 22:15:34 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88jdbc/</guid>
      <description>1. 依赖   jdbc依赖
  mysql驱动
  2 配置   账号
  密码
  url：地址:端口/数据库名？
   serverTimezone:设置时区(因为mysql服务器默认为东4区，与本地web服务器时间存在时差) useUnicode:防止乱码（和后面连用，mysql用gbk编码，加了这个，存数据先将数据转换为字节码再用gbk编码存，取数据先将gbk格式解码成字节码再按utf-8编码） characterEncoding:编码方式    driver-class-name：驱动名称
   com.mysql.jdbc.Driver(5.2以上)    ​ 3 连接逻辑   DataSourceAutoConfiguration.java（springboot启动时自动扫描并注册该类）
   AutoConfiguration参考前面自动装配原理 ConditionalOnClass 该自动装配类生效所需的类 ConditionalOnMissingBean 该自动装配类生效不能存在的bean EnableConfigurationProperties给实体类赋值，参考前面配置文件写法    ​   接上一步，扫描注册该自动装配类时会调用方法进行数据的连接，连接配置则保存在DataSourceProperties.class中
  DataSourceProperties.java
   ConfigurationProperties:给当前实体类赋值      连接成功后会自动生成dataSource的bean并注入到容器中</description>
    </item>
    
    <item>
      <title>@RequestMapping、@getMapping的区别</title>
      <link>https://lyffin1997.github.io/java/requestmappinggetmapping%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 11:53:54 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/requestmappinggetmapping%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>@RequestParam、@requestBody的区别</title>
      <link>https://lyffin1997.github.io/java/requestparamrequestbody%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 11:53:42 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/requestparamrequestbody%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Java抽象类</title>
      <link>https://lyffin1997.github.io/java/java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</link>
      <pubDate>Tue, 12 Jul 2022 11:52:23 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E6%8A%BD%E8%B1%A1%E7%B1%BB/</guid>
      <description>  抽象类中可以有抽象方法和非抽象方法
  抽象类可以没有抽象方法，但有抽象方法的一定是抽象类
   一个类只能继承一个类 一个类可以实现多个接口 一个接口可以继承多个接口    抽象类中的子类必须重写抽象类中所有的抽象方法
   或者子类也是抽象类、抽象方法    抽象类不能被实例化
  </description>
    </item>
    
    <item>
      <title>什么是AOP</title>
      <link>https://lyffin1997.github.io/spring/%E4%BB%80%E4%B9%88%E6%98%AFaop/</link>
      <pubDate>Tue, 12 Jul 2022 11:48:09 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/%E4%BB%80%E4%B9%88%E6%98%AFaop/</guid>
      <description>定义：Aspect Oriented Programming 面向切面编程
   也叫动态代理 通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术 是一种概念，没有具体语言实现 将逻辑重复代码独立于业务代码之外 参考： https://my.oschina.net/guangshan/blog/1797461    目的：例如java中要想实现代码的重用，一般可以用继承或者组合的方式。但是当你修改最底层的方法时，其他的子类以及调用的方法都要修改，增加了代码开发量和出错率。（父子关系的纵向重用）
   由此AOP思想随之诞生（横向切面）    解释：例如这样一个需求：有三个访问类和一个数据类，三个访问类并发访问数据类，且一个类在访问数据时其他类不能访问，当前类访问结束其它类才能访问
    传统方法：
    创建一个抽象类   访问类继承该抽象类
  限制：
   java只能单继承，访问类无法再继承其他类 访问类因包含“锁”状态，只能被重用在有“锁”的场景，重用受限      AOP思想：
   访问类主要功能是访问数据，而不是锁 因此将“锁”抽取出来作为一个切面       实例：
    例如想要实现某个网址增加授权认证：</description>
    </item>
    
    <item>
      <title>ArrayList、ArrayDeque、LinkedList区别</title>
      <link>https://lyffin1997.github.io/java/arraylistarraydequelinkedlist%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 11:44:56 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/arraylistarraydequelinkedlist%E5%8C%BA%E5%88%AB/</guid>
      <description> 随机访问元素性能   ArrayList、ArrayDeque &amp;gt; LinkedList
  （索引数据结构，直接返回索引位置元素，但是linkedList需要移动指针去找）
   存储形式
   ArrayList、ArraryDeque：数组 LinkedList：链表（双链）     (因此linkedList内存消耗更多，因为它每个节点需要存储实际数据和前后节点的位置)
  插入、删除元素性能   ArrayList、ArrayDeque &amp;lt; LinkedList
  （因为插入数据后需要移动插入位置后所有元素并且修改它们的索引，数组满了时还要建立新数组）
   删除尾部元素
    ArrayList删除尾部元素时，若size - index - 1 &amp;gt; 0，需要copy数组，较耗时
   size:list大小 index:remove时输入的索引      ​    ArrayDeque调用pollLast()方法，该方法保留了tail属性，较快    ​ </description>
    </item>
    
    <item>
      <title>Springboot扫描路径问题</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 Jul 2022 11:40:21 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</guid>
      <description>  默认扫描路径
   如下图所示，springboot启动时，会默认扫描启动类所在包及其子包中所有的配置类 启动类所在包及其子包：如图springbootweb路径下所有的文件（引入的jar包注解除外） 配置类：扫描@Component、@Configuration、@Controller、@Service等注解标记的所有类，并注入到容器中    ​   @SpringBootApplication注解的scanBasePackages属性
   若想扫描默认路径之外的路径可使用scanBasePackages指定路径，重新指定后原默认扫描路径不会再生效    ​   @ComponentScan注解
   如果注解只指定了一个路径并且该路径与默认启动路径相同，那么@ComponentScan注解不生效 如果指定了正确的路径，则@ComponentScan注解生效，默认路径失效    ​   优先级：@ComponentScan &amp;gt; scanBasePackages &amp;gt; 默认路径
  jar包扫描问题
   若第三方jar包在默认路径中，且jar包中的目录也是com.lyffin.springbootweb，那么jar包中的注解能被扫描到，其他目录的jar包无法被扫描，可通过scanBasePackages重新指定扫描路径 若第三方jar包不在默认路径中，则需要@ComponentScan注解或者scanBasePackages属性重新指定扫描路径    现实代码中重新指定的路径必须包含默认扫描路径，否则工程中的注解就扫描不到了
  </description>
    </item>
    
    <item>
      <title>Java对象的类加载过程</title>
      <link>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 12 Jul 2022 11:31:44 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B/</guid>
      <description>  定义：jvm虚拟机把.class文件中类信息加载进内存，并进行解析生成对应的class对象的过程
  过程：加载、链接、初始化
  链接：验证、准备、解析
  完整过程：加载=&amp;gt;验证=&amp;gt;准备=&amp;gt;解析=&amp;gt;初始化
  加载：把class字节码文件从各个来源通过类加载器装载入内存中。
  字节码来源：本地路径下编译生成的.class文件，从jar包中的.class文件，从远程网络、以及动态代理实时编译。
  类加载器：一般包括启动类加载器、扩展类加载器、应用类加载器以及用户自定义加载器。
  验证：保证加载进来的字节流符合虚拟机规范，不会造成安全错误。
  对元数据对验证
  对字节码的验证
  对文件格式的验证
  对符号引用对验证
  准备：为类变量（静态变量）分配内存，并赋予初值。
  解析：将常量池中的符号引用替换为直接引用的过程。
  符号引用：字符串，具有唯一识别性，用于识别方法、变量、类信息
  直接引用：内存地址或偏移量
   （例如方法hello()，方法的地址为1234567，hello就是符号引用，1234567是直接引用）
  初始化：主要对类变量进行初始化，并执行类构造器对过程。  </description>
    </item>
    
    <item>
      <title>Java对象的创建过程</title>
      <link>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 12 Jul 2022 11:30:43 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/java%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%88%9B%E5%BB%BA%E8%BF%87%E7%A8%8B/</guid>
      <description> 检查类是否已经被加载  （根据new的参数在常量池中定位一个类的符号引用，如果没有找到这个符号引用，说明类没有被加载，则进行类的加载、解析、初始化）
 为对象分配内存空间（堆中） 为分配的内存空间初始化零值（为对象字段设置零值） 对对象进行其他设置（设置对象头） 调用对象的init方法   （执行对象内部生产的init方法，初始化成员变量值，同时执行搜集到的{}代码块逻辑，这里只初始化用static修饰的部分，最后执行对象的构造方法）
 </description>
    </item>
    
    <item>
      <title>@Autowired和@Resource区别</title>
      <link>https://lyffin1997.github.io/java/autowired%E5%92%8Cresource%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 11:25:46 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/autowired%E5%92%8Cresource%E5%8C%BA%E5%88%AB/</guid>
      <description> 功能上它们两个的作用是相同的，都是自动注入一个spring容器中的实例 但是它们的注入方式不同 @Resource(J2EE注解)有type和name两个属性，默认按照byName的方式装配，若没有声明name和type，如果标记的字段则以字段名称作为name去匹配，如果标记的是方法，找不到name匹配的bean就会按type去匹配。  那么是如何准确的从容器中找到对应的bean的呢？如下是装配规则
​ @Resource private Person person; @Resource(name=&amp;#34;xxx&amp;#34;) @Resource(type=&amp;#34;xxx&amp;#34;)   @Autowire（spring注解）按照byType的方式去匹配bean。
   默认要求必须对象存在，若要允许null值存在，需要声明    @Autowire(required=false)    若要按name匹配需要声明    @Autowired () @Qualifier ( &amp;#34;baseDao&amp;#34; ) </description>
    </item>
    
    <item>
      <title>@PostConstruct的用法</title>
      <link>https://lyffin1997.github.io/java/postconstruct%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Tue, 12 Jul 2022 11:16:11 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/postconstruct%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description> 项目启动时，会自动执行用@PostConstruct标记的方法 只能修饰非静态的void方法  @PostConstruct public void init() {}  需要和@Component一起使用，否则会报错 优先级：Constructor &amp;raquo; @Autowired &amp;raquo; @PostConstruct   比如一个用@Component标记的类要在项目启动时创建bean注入到容器中，它的过程应该是这样的：
   先调用类的Constructor（构造方法）创建一个对象，该对象是空对象，因为它还没有初始化。    自动注入@Autowire标记的变量，此时自动注入的变量才会有值    最后再调用@PostConstruct标记的方法，在想对该对象进行一些初始化操作时，可以使用该注解。    初始化完成后将该对象的实例注入spring容器中   问题：构造方法里也能进行初始化操作，为什么还要@PostConstruct注解？
 这就涉及到上面说的优先级了，如下图所示，假如构造方法中进行的初始化操作需要用到@Autowire标记的变量，但是@Autowire的优先级在Constructor后面，也就是说在构造方法结束之前，mqttClient的值是null的，所以此时无法完成想要进行的初始化
 ​ 解决方法：
 将初始化操作放在@PostConstruct标记的方法中，这样@Autowire标记的变量就有值了
 </description>
    </item>
    
    <item>
      <title>@Component和@service的区别</title>
      <link>https://lyffin1997.github.io/java/component%E5%92%8Cservice%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 10:46:38 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/component%E5%92%8Cservice%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>   @Controller，@Service，@Repository都包含了@Component子注解，即它们都有@Component的功能
   ​    @Controller用于表现层（就是那些XXXController的文件，表现层可以理解为与前端交互数据的层面），@Service用于服务层（服务层可以理解为处理业务逻辑的层面），@Repository用于持久层（持久层即为与数据库交互的层面，一般的DAO文件就是该层）
    @Component：spring基本注解，可以自动检测和使用类路径（@Component标记的当前类的路径）扫描并自动配置bean，每个类即一个bean（即类的实例），并添加到容器中。
    简单意思就是可以把@Component标记的类自动创建一个它的实例注入到容器中（在项目启动时完成spring注入）
 </description>
    </item>
    
    <item>
      <title>重载和重写的区别</title>
      <link>https://lyffin1997.github.io/java/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Tue, 12 Jul 2022 10:44:54 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/%E9%87%8D%E8%BD%BD%E5%92%8C%E9%87%8D%E5%86%99%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>1. 重载  函数名相同 参数个数不同或者参数类型不同 函数重载和返回值类型无关 可以有不同的访问修饰符； 可以抛出不同的异常；  2. 重写  参数列表必须完全与被重写的方法相同，否则不能称其为重写而是重载。 返回的类型必须一直与被重写的方法的返回类型相同，否则不能称其为重写而是重载。 访问修饰符的限制一定要大于被重写方法的访问修饰符（public&amp;gt;protected&amp;gt;default&amp;gt;private） 重写方法一定不能抛出新的检查异常或者比被重写方法申明更加宽泛的检查型异常。例如：父类的一个方法申明了一个检查异常IOException，在重写这个方法是就不能抛出Exception,只能抛出IOException的子类异常，可以抛出非检查异常。  </description>
    </item>
    
    <item>
      <title>如何重写comparator比较器</title>
      <link>https://lyffin1997.github.io/java/%E5%A6%82%E4%BD%95%E9%87%8D%E5%86%99comparator%E6%AF%94%E8%BE%83%E5%99%A8/</link>
      <pubDate>Tue, 12 Jul 2022 10:40:29 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/%E5%A6%82%E4%BD%95%E9%87%8D%E5%86%99comparator%E6%AF%94%E8%BE%83%E5%99%A8/</guid>
      <description>方法一：  //Arrays.sort(T[] a, Comparator&amp;lt;? super T&amp;gt; c) //T[] a：需要比较的数组 //Comparator&amp;lt;? super T&amp;gt; c：比较器 Car[] arr = new Car[3]; Arrays.sort(arr, new Comparator&amp;lt;Car&amp;gt;() { @Override public int compare(Car o1, Car o2) { return o1.position - o2.position; } });  方法二：  Car[] arr = new Car[3]; Arrays.sort(arr, (a, b) -&amp;gt; { //返回值&amp;gt;0交换  return b.position-a.position; });  方法三：  Car[] arr = new Car[3]; Arrays.sort(cars, (a, b) -&amp;gt; Integer.compare(a.position, b.position));  方法四：  Car[] arr = new Car[3]; Arrays.</description>
    </item>
    
    <item>
      <title>String、StringBuilder、StringBuffer</title>
      <link>https://lyffin1997.github.io/java/stringstringbuilderstringbuffer/</link>
      <pubDate>Tue, 12 Jul 2022 00:50:39 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/stringstringbuilderstringbuffer/</guid>
      <description>1. 字符串相加方式的区别  String   String str = &amp;ldquo;a&amp;rdquo; + &amp;ldquo;b&amp;rdquo;; //最快
  String str = &amp;quot;&amp;quot; + &amp;ldquo;word&amp;rdquo;;
  StringBuilder   StringBuilder s = new StringBuilder(&amp;ldquo;word&amp;rdquo;).append(&amp;ldquo;a&amp;rdquo;).apend(&amp;ldquo;b&amp;rdquo;);
  StringBuffer   同StringBuilder。
 2. 字符串相加结果的区别  String   String是final修饰的不可变类,即一旦创建对象，字符序列不可变
  如: String s = &amp;quot;a&amp;quot;;
  s = &amp;quot;b&amp;quot;;
  System.out.println(s);
  打印结果是b，但此时“b”在内存中的位置已不是原来“a”的位置，而是新创建了一个实例对象指向“b”，并且s指向新对象，原对象仍然存在，如果没有再被引用将被回收。
  StringBuilder   通过append()、insert()等方法可改变字符串序列，内存地址不变。一般得到最终字符串后转换成String。
  StringBuffer   同上。</description>
    </item>
    
  </channel>
</rss>
