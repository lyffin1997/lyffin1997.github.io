<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>应用 on 小黎的技术指北</title>
    <link>https://lyffin1997.github.io/categories/%E5%BA%94%E7%94%A8/</link>
    <description>Recent content in 应用 on 小黎的技术指北</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Thu, 14 Jul 2022 23:10:53 +0800</lastBuildDate><atom:link href="https://lyffin1997.github.io/categories/%E5%BA%94%E7%94%A8/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Springboot如何接管springmvc</title>
      <link>https://lyffin1997.github.io/spring/springboot%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1springmvc/</link>
      <pubDate>Thu, 14 Jul 2022 23:10:53 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E5%A6%82%E4%BD%95%E6%8E%A5%E7%AE%A1springmvc/</guid>
      <description>1. 依赖 pom.xml
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!--这里代码示例使用Thymeleaf模板引擎--&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-thymeleaf&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.projectlombok&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;lombok&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2. 代码示例 主要是通过实现WebMvcConfigurer.java接口来进行个性化定制，下面进行个别方法的重写展示：
  创建配置文件
在启动类同级目录下创建config文件夹，在里面创建配置文件：./config/MyMvcConfig.java
  2.1 重写视图解析器 可以在MyViewResolver中自定义一些功能
@Configuration public class MyMvcConfig implements WebMvcConfigurer { @Bean public MyViewResolver myViewResolver() { return new MyViewResolver(); } //自定义视图解析器  public static class MyViewResolver implements ViewResolver { @Override public View resolveViewName(String viewName, Locale locale) throws Exception { return null; } } } 2.2 重写视图控制器   实现视图跳转</description>
    </item>
    
    <item>
      <title>Snmp_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/snmp_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 14 Jul 2022 00:23:38 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/snmp_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 开机交换机snmp协议（非华为交换机跳过这一步） ​ //192.168.1.9是snmp_exporter地址
2. 配置go 环境 安装go1.15.6（tar包或者命令行安装都行）
 vim /etc/profile
export GOROOT=/usr/local/go
export PATH=$PATH:$GOROOT/bin
export GOPATH=/root/go
source /etc/profile
go version #显示版本号即安装成功
  //go环境变量国内代理：
go env -w GO111MODULE=on
go env -w GOPROXY=https://goproxy.cn,direct
 3. 下载snmp环境 yum install gcc gcc-g++ make net-snmp net-snmp-utils net-snmp-libs net-snmp-devel (此外，git也需安装配置好)
 //测试snmp
snmpwalk -v 2c -c public 192.168.1.222 .1 //pubilc是团体名，.1表示查看所有信息，192.168.1.222是设备ip
 4. 下载generator代码 go get github.com/prometheus/snmp_exporter/generator 5. 编译  //路径不一定准确，总之找到GOPATH路径下的generator文件夹
cd ${GOPATH-$HOME/go}/src/github.com/prometheus/snmp_exporter/gener ator go build  6.</description>
    </item>
    
    <item>
      <title>Tomcat_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/tomcat_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Thu, 14 Jul 2022 00:04:50 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/tomcat_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 下载相关文件 https://github.com/nlighten/tomcat_exporter
2. 下载下图中6个jar包 放到要监控的Tomcat的lib目录下，例如：/usr/local/apache-tomcat-7.0.61/lib
3. 下载war包 重命名metrics.war，放到Tomcat的webapps目录下，例如：/usr/local/apache-tomcat-7.0.61/webapps
4. 重启Tomcat，访问ip:8080/metrics即可 注意：端口号和启动的tomcat端口号一致
5. 在prometheus.yml中，添加job 6. 重启prometheus 7. promQL  tomcat延迟（5分钟内平均值）  sum by(instance)(increase(tomcat_requestprocessor_time_seconds{instance=&amp;quot;$instance&amp;quot;}[5m])) / sum by(instance)(increase(tomcat_requestprocessor_request_count_total{instance=&amp;quot;$instance&amp;quot;}[5m])) * 1000  tomcat实例发送流量（累加）  sum by(instance)(tomcat_requestprocessor_sent_bytes{instance=&amp;quot;$instance&amp;quot;})  tomcat实例接收流量（累加）  sum by(instance)(tomcat_requestprocessor_received_bytes{instance=&amp;quot;$instance&amp;quot;})  tomcat实例请求总数（累加）  sum by(instance)(tomcat_requestprocessor_request_count_total{instance=&amp;quot;$instance&amp;quot;})  tomcat实例错误请求总数（累加）  sum by(instance)(tomcat_requestprocessor_error_count_total{instance=&amp;quot;$instance&amp;quot;})  tomcat堆内存使用情况  jvm_memory_bytes_used{area=&amp;quot;heap&amp;quot;,instance=&amp;quot;$instance&amp;quot;} / jvm_memory_bytes_committed{area=&amp;quot;heap&amp;quot;,instance=&amp;quot;$instance&amp;quot;} * 100  tomcat GC次数（累加）  sum by(instance)(jvm_gc_collection_seconds_count{instance=&amp;quot;$instance&amp;quot;}) //5分钟内增长次数
increase(jvm_gc_collection_seconds_count{instance=&amp;quot;$instance&amp;quot;}[5m]) //5分支内增长耗时
increase(jvm_gc_collection_seconds_sum{instance=&amp;quot;$instance&amp;quot;}[5m])  tomcat线程数  sum by(instance)(tomcat_threads_total{instance=&amp;quot;$instance&amp;quot;}) </description>
    </item>
    
    <item>
      <title>Windows_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/windows_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:58:09 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/windows_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 安装及部署  下载windows exporter程序 https://github.com/prometheus-community/windows_exporter/releases 直接双击运行即可 默认端口9182 prometheus添加配置   2. PromQL  CPU利用率  100 - (avg by (instance) (irate(windows_cpu_time_total{instance=&amp;quot;$node&amp;quot;,mode=&amp;quot;idle&amp;quot;}[2m])) * 100)  内存容量  windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;}  内存使用量  windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;} - windows_os_physical_memory_free_bytes{instance=&amp;quot;$node&amp;quot;}  内存利用率  (1 - (windows_os_physical_memory_free_bytes{instance=&amp;quot;$node&amp;quot;} / windows_cs_physical_memory_bytes{instance=&amp;quot;$node&amp;quot;})) * 100  磁盘容量  sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;})  磁盘使用量  sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;} - windows_logical_disk_free_bytes{instance=&amp;quot;$node&amp;quot;})  磁盘利用率  (1 - sum by(instance)(windows_logical_disk_free_bytes{instance=&amp;quot;$node&amp;quot;}) / sum by(instance)(windows_logical_disk_size_bytes{instance=&amp;quot;$node&amp;quot;})) * 100  磁盘每秒读取(KB)  sum by(instance)(irate(windows_logical_disk_read_bytes_total{instance=&amp;quot;$node&amp;quot;}[5m])) / 1024  磁盘每秒写入(KB)  sum by(instance)(irate(windows_logical_disk_write_bytes_total{instance=&amp;quot;$node&amp;quot;}[5m])) / 1024  网络上传速率(Kbps)  sum by(instance)(irate(windows_net_bytes_sent_total{instance=&amp;quot;$node&amp;quot;,nic!</description>
    </item>
    
    <item>
      <title>Mysqld_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/mysqld_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:45:04 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/mysqld_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 登录mysql并增加exporter授权  mysql -uroot -p use mysql; set global validate_password_policy=0; create user &amp;lsquo;exporter&amp;rsquo;@&#39;%&#39; identified by &amp;lsquo;12345678&amp;rsquo;; GRANT PROCESS, REPLICATION CLIENT, SELECT ON . TO &amp;lsquo;exporter&amp;rsquo;@&#39;%&#39; WITH MAX_USER_CONNECTIONS 3; flush privileges;  2. 安装mysqld_exporter ​ 也可直接从链接下载tar包复制到目录中替换步骤2，下载链接：https://github.com/prometheus/mysqld_exporter/releases/download/v0.12.1/mysqld_exporter-0.12.1.linux-amd64.tar.gz
3. 创建mysql配置文件  cd /usr/local/prometheus/mysqld_exporter touch .my.cnf vi .my.cnf 按英文输入法小写“i”键 将以下内容复制粘贴  [client] host=127.0.0.1 port=3306 user=exporter password=12345678  按“Esc”键，然后再输入英文的“:wq”，按enter退出  4. 创建mysqld_exporter配置文件  cd /usr/lib/systemd/system/ touch mysql_exporter.service 输入文件内容如下  [Unit] Description=mysqld_exporter After=network.target [Service] Type=simple User=mysql # exporter对应授权账号,exporter123对应授权密码,localhost对应授权账号密码所在的地址 Environment=DATA_SOURCE_NAME=exporter:12345678@(localhost:3306)/ ExecStart=/usr/local/prometheus/mysqld_exporter/mysqld_exporter --web.</description>
    </item>
    
    <item>
      <title>Node_exporter安装部署</title>
      <link>https://lyffin1997.github.io/application/node_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Wed, 13 Jul 2022 23:14:57 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/node_exporter%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>1. 安装部署 1. cd /usr/local/prometheus （先进入你想安装的目录）
2. 下载node_exporter包 wget https://github.com/prometheus/node_exporter/releases/download/v0.18.1/node_exporter-0.18.1.linux-amd64.tar.gz -P /usr/local/prometheus 3. 解压 tar zxvf /usr/local/prometheus/node_exporter-0.18.1.linux-amd64.tar.gz 4. 重命名 mv /usr/local/prometheus/node_exporter-0.18.1.linux-amd64.tar.gz /usr/local/prometheus/node_exporter 5. 创建启动服务 touch /etc/systemd/system/node_exporter.service 6. 编辑启动服务文件  vim /etc/systemd/system/node_exporter.service 按i（注意切换英文输入） 将下列代码复制粘贴  [Unit] Description=node_exporter Documentation=https://prometheus.io/ After=network.target [Service] Type=simple User=root ExecStart=/usr/local/prometheus/node_exporter/node_exporter Restart=on-failure [Install] WantedBy=multi-user.target  按esc 按 :wq (注意:也要按)  7. 重新加载系统服务 systemctl daemon-reload 8. 开机自启 systemctl enable node_exporter 9. 启动 systemctl start node_exporter 10. 验证 http://10.4.4.173:9100/metrics
2. promQL 2.</description>
    </item>
    
    <item>
      <title>Hugo技巧</title>
      <link>https://lyffin1997.github.io/application/hugo%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 13 Jul 2022 00:10:35 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/hugo%E6%8A%80%E5%B7%A7/</guid>
      <description>  编译hugo页面（myblog下运行，生成public）
hugo --theme=hello-friend-ng --baseUrl=&amp;quot;https://lyffin1997.github.io/&amp;quot; --buildDrafts
  运行hugo(myblog下运行)
hugo server -t hello-friend-ng --buildDrafts
  </description>
    </item>
    
    <item>
      <title>Springsecurity</title>
      <link>https://lyffin1997.github.io/spring/springsecurity/</link>
      <pubDate>Tue, 12 Jul 2022 23:14:27 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springsecurity/</guid>
      <description>1. 什么是SpringSecurity  Spring Security是针对spring项目的安全框架，也是springboot底层安全模块默认的技术选型，它可以实现强大的Web安全控制，仅需要引入spring-boot-starter-security
 主要功能：认证（Authentication）和授权（Authorization）
2. 代码实例 2.1 依赖 &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-security&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; //themeleaf依赖用于配合教程展示，核心依赖为上面的starter &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-spring5&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.thymeleaf.extras&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;thymeleaf-extras-java8time&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; 2.2 配置文件 //取消页面缓存 spring.thymeleaf.cache=false 2.3 编码   导入themeleaf模板
  编写业务代码
  ​  编写路由  @Controller public class RouterController { @RequestMapping({&amp;#34;/&amp;#34;,&amp;#34;/index&amp;#34;}) public String index() { return &amp;#34;index&amp;#34;; } @RequestMapping(&amp;#34;/toLogin&amp;#34;) public String toLogin() { return &amp;#34;views/login&amp;#34;; } @RequestMapping(&amp;#34;/level1/{id}&amp;#34;) public String level1(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level1/&amp;#34;+id; } @RequestMapping(&amp;#34;/level2/{id}&amp;#34;) public String level2(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level2/&amp;#34;+id; } @RequestMapping(&amp;#34;/level3/{id}&amp;#34;) public String level3(@PathVariable(&amp;#34;id&amp;#34;) int id) { return &amp;#34;views/level3/&amp;#34;+id; } }  编写springsecurity配置文件  //开启websecurity功能 @EnableWebSecurity public class SecurityConfig extends WebSecurityConfigurerAdapter { //http安全策略  //授权  @Override protected void configure(HttpSecurity http) throws Exception { //首页所有人可访问，功能页只能有对应权限的人访问  http.</description>
    </item>
    
    <item>
      <title>Shiro</title>
      <link>https://lyffin1997.github.io/application/shiro/</link>
      <pubDate>Tue, 12 Jul 2022 23:09:07 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/shiro/</guid>
      <description>1 什么是shiro   定义：Apache Shiro是一个java的安全框架
  作用：认证，授权，加密，会话管理，web集成，缓存
  核心：
   Subject：用户 SecurityManager：管理所有用户 Realm：连接数据    2 快速开始shiro   依赖   配置文件
   log4j2.xml    &amp;lt;Configuration name=&amp;#34;ConfigTest&amp;#34; status=&amp;#34;ERROR&amp;#34; monitorInterval=&amp;#34;5&amp;#34;&amp;gt; &amp;lt;!-- ~ Licensed to the Apache Software Foundation (ASF) under one ~ or more contributor license agreements. See the NOTICE file ~ distributed with this work for additional information ~ regarding copyright ownership.</description>
    </item>
    
    <item>
      <title>Springboot整合mybatis</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88mybatis/</link>
      <pubDate>Tue, 12 Jul 2022 22:50:54 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88mybatis/</guid>
      <description> 依赖   配置  ​  mybatis.type-aliases-package：指定映射文件所在包 mybatis.mapper-locations：指定xml文件路径  ​   mapper接口（Dao层）
   @Mapper注解：用于mapper接口文件，表示该文件是mybatis的一个接口类 @MapperScan(&amp;ldquo;com.lyffin.mapper&amp;rdquo;)：用于启动类，扫描该包中所有文件 @Repository：扫描并自动配置bean    ​   xml文件
   路径：resources/mybatis/mapper（xml文件写在该路径下，注意与上面配置文件对应） namespace：指定dao文件 resultType：指定映射文件（这里直接使用别名而不是路径，因为配置文件已经配置了） parameterType：同上 ：开启缓存，用法未知，自行百度 ：sql片段，不解释    &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; ?&amp;gt; &amp;lt;!DOCTYPE mapper PUBLIC &amp;#34;-//mybatis.org//DTD Mapper 3.0//EN&amp;#34; &amp;#34;http://mybatis.org/dtd/mybatis-3-mapper.dtd&amp;#34;&amp;gt; &amp;lt;mapper namespace=&amp;#34;com.lyffin.mapper.UserMapper&amp;#34;&amp;gt; &amp;lt;select id=&amp;#34;selectBlog&amp;#34; resultType=&amp;#34;User&amp;#34;&amp;gt; select * from Blog where id = #{id} &amp;lt;/select&amp;gt; &amp;lt;/mapper&amp;gt; ​ </description>
    </item>
    
    <item>
      <title>配置durid</title>
      <link>https://lyffin1997.github.io/application/%E9%85%8D%E7%BD%AEdurid/</link>
      <pubDate>Tue, 12 Jul 2022 22:42:56 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/application/%E9%85%8D%E7%BD%AEdurid/</guid>
      <description>1. 配置druid数据源  依赖    配置文件
   因为配置项里用到了log4j，所以还要引入依赖   2. 配置druid监控 ​ ​ ​ ​ 3. 配置druid过滤器 ​ </description>
    </item>
    
    <item>
      <title>Springboot整合jdbc</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88jdbc/</link>
      <pubDate>Tue, 12 Jul 2022 22:15:34 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%95%B4%E5%90%88jdbc/</guid>
      <description>1. 依赖   jdbc依赖
  mysql驱动
  2 配置   账号
  密码
  url：地址:端口/数据库名？
   serverTimezone:设置时区(因为mysql服务器默认为东4区，与本地web服务器时间存在时差) useUnicode:防止乱码（和后面连用，mysql用gbk编码，加了这个，存数据先将数据转换为字节码再用gbk编码存，取数据先将gbk格式解码成字节码再按utf-8编码） characterEncoding:编码方式    driver-class-name：驱动名称
   com.mysql.jdbc.Driver(5.2以上)    ​ 3 连接逻辑   DataSourceAutoConfiguration.java（springboot启动时自动扫描并注册该类）
   AutoConfiguration参考前面自动装配原理 ConditionalOnClass 该自动装配类生效所需的类 ConditionalOnMissingBean 该自动装配类生效不能存在的bean EnableConfigurationProperties给实体类赋值，参考前面配置文件写法    ​   接上一步，扫描注册该自动装配类时会调用方法进行数据的连接，连接配置则保存在DataSourceProperties.class中
  DataSourceProperties.java
   ConfigurationProperties:给当前实体类赋值      连接成功后会自动生成dataSource的bean并注入到容器中</description>
    </item>
    
    <item>
      <title>Springboot扫描路径问题</title>
      <link>https://lyffin1997.github.io/spring/springboot%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</link>
      <pubDate>Tue, 12 Jul 2022 11:40:21 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/spring/springboot%E6%89%AB%E6%8F%8F%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</guid>
      <description>  默认扫描路径
   如下图所示，springboot启动时，会默认扫描启动类所在包及其子包中所有的配置类 启动类所在包及其子包：如图springbootweb路径下所有的文件（引入的jar包注解除外） 配置类：扫描@Component、@Configuration、@Controller、@Service等注解标记的所有类，并注入到容器中    ​   @SpringBootApplication注解的scanBasePackages属性
   若想扫描默认路径之外的路径可使用scanBasePackages指定路径，重新指定后原默认扫描路径不会再生效    ​   @ComponentScan注解
   如果注解只指定了一个路径并且该路径与默认启动路径相同，那么@ComponentScan注解不生效 如果指定了正确的路径，则@ComponentScan注解生效，默认路径失效    ​   优先级：@ComponentScan &amp;gt; scanBasePackages &amp;gt; 默认路径
  jar包扫描问题
   若第三方jar包在默认路径中，且jar包中的目录也是com.lyffin.springbootweb，那么jar包中的注解能被扫描到，其他目录的jar包无法被扫描，可通过scanBasePackages重新指定扫描路径 若第三方jar包不在默认路径中，则需要@ComponentScan注解或者scanBasePackages属性重新指定扫描路径    现实代码中重新指定的路径必须包含默认扫描路径，否则工程中的注解就扫描不到了
  </description>
    </item>
    
    <item>
      <title>如何重写comparator比较器</title>
      <link>https://lyffin1997.github.io/java/%E5%A6%82%E4%BD%95%E9%87%8D%E5%86%99comparator%E6%AF%94%E8%BE%83%E5%99%A8/</link>
      <pubDate>Tue, 12 Jul 2022 10:40:29 +0800</pubDate>
      
      <guid>https://lyffin1997.github.io/java/%E5%A6%82%E4%BD%95%E9%87%8D%E5%86%99comparator%E6%AF%94%E8%BE%83%E5%99%A8/</guid>
      <description>方法一：  //Arrays.sort(T[] a, Comparator&amp;lt;? super T&amp;gt; c) //T[] a：需要比较的数组 //Comparator&amp;lt;? super T&amp;gt; c：比较器 Car[] arr = new Car[3]; Arrays.sort(arr, new Comparator&amp;lt;Car&amp;gt;() { @Override public int compare(Car o1, Car o2) { return o1.position - o2.position; } });  方法二：  Car[] arr = new Car[3]; Arrays.sort(arr, (a, b) -&amp;gt; { //返回值&amp;gt;0交换  return b.position-a.position; });  方法三：  Car[] arr = new Car[3]; Arrays.sort(cars, (a, b) -&amp;gt; Integer.compare(a.position, b.position));  方法四：  Car[] arr = new Car[3]; Arrays.</description>
    </item>
    
  </channel>
</rss>
